[
["index.html", "Getting and Cleaning Data Title Page", " Getting and Cleaning Data Sean Kross 2018-03-02 Title Page Cover Image: The Crossing Sweeper by Seymour Joseph Guy "],
["introduction.html", "Introduction", " Introduction We are currently in a strange time with respect to people’s beliefs and attitudes about data. You may have heard phrases like “data is the new oil” or “the world is awash with data”. Despite the apparent value and ubiquity of data it is not obvious how data are generated, how generated data are collected, and how collected raw data are then organized into useful and meaningful structures. Nearly all of the “interesting” data being discussed in the public discourse is data that you likely don’t have access to: a small business’ Amazon purchases, a celebrity’s Facebook social graph, or the collective Google searches of a far-away country. Even if you have access to interesting data, it’s often not obvious how to import raw data into an environment where you can examine it, or how to manipulate the data into a form so that it can be analyzed. The goal of this book is teach you principles that can be applied to thinking about data at any scale, and to equip you with technical skills so that the structure or state of your data is not an obstacle in the way of accomplishing your ultimate goals. A core part of data science is doing “data janitor” type work. Despite the fact that this work is perceived as unglamorous compared to visualization or modeling, the integrity of the data analytic process depends on data that has been obtained and reshaped with integrity. The ability to develop readable, approachable, and flexible code for handling data will only increase in demand considering the growing role that data plays in our society. It’s not at all obvious how to obtain datasets that are appropriate for data scientific methods. Unlike oil, data doesn’t require millions of dollars in infrastructure to start collecting fractional amounts of the raw material. If you wanted to, you could start logging the outdoor temperature in the mornings, or how many birds you see every day. The issue with this kind of data collection is that it doesn’t scale well: it requires you as an individual to make a single observation every day. Most data generated today are not made by people recording observations, they are made by computers logging the actions or behaviors of people or even other computers. In this book you will learn where to find large datasets and how to write programs for collecting data. This book focuses on tools in the R programming language, so you should already be familiar with the basics of R before you begin this book. If you’re new to R I highly suggest getting started with R Programming for Data Science by Roger Peng or with Swirl for a more interactive approach. If you’re interested in a thorough treatment of advanced topics in R programming I recommend Mastering Software Development in R by Roger Peng, Brooke Anderson, and me. "],
["philosophies-of-data.html", "Chapter 1 Philosophies of Data 1.1 What are Data 1.2 Data Frames and Tibbles 1.3 Tidy Data 1.4 Matrix Data 1.5 Hierarchical Data", " Chapter 1 Philosophies of Data 1.1 What are Data Data are observations about the world. In order to make sense of and give context to these observations we organize data into structures. In this chapter we’ll discuss three general types of data structres: data frames, matricies, and hierarchies. When you’re getting and cleaning data it’s often useful to have one of these data structures in mind as an end goal of how you want your data to be organized. In the following chapters we’ll show you how you can use each of these data structures in order to achieve your goals. 1.2 Data Frames and Tibbles R is an object oriented programming language, and there are several varieties of R objects you can use to represent data. In this book we will concentrate mostly on how to use data frames as the central object for thinking about data. Data frames are rectangular data objects, meaning that they are composed of rows and columns, much like the layout of a piece of graph paper or a spreadsheet. In the next few chapters we’ll discuss how you can import data into R from many different sources, but you can also create data frames with code alone. There’s no better tool for creating your own data frames from scratch than the tibble package. Install the package with install.packages(&quot;tibble&quot;), and then we can start creating our own data frames. Let’s start up the package and then create a simple data frame, where every column is specified with a simple vector: library(tibble) people &lt;- data_frame(Name = c(&quot;Shannon&quot;, &quot;Jeff&quot;, &quot;Sean&quot;, &quot;Roger&quot;), Department = c(&quot;Genetics&quot;, &quot;Biostatistics&quot;, &quot;Cognitive Science&quot;, &quot;Biostatistics&quot;), School = c(&quot;JHU&quot;, &quot;JHU&quot;, &quot;UCSD&quot;, &quot;Monash&quot;)) people ## # A tibble: 4 x 3 ## Name Department School ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Shannon Genetics JHU ## 2 Jeff Biostatistics JHU ## 3 Sean Cognitive Science UCSD ## 4 Roger Biostatistics Monash Let’s take a look at what is printed when we enter our table of people in the R console. The first line, # A tibble: 4 x 3, shows that the object being printed is a tibble. A tibble is a data frame with some nice extra properties which we’ll discuss later. The second line, Name Department School, shows the column names for the tibble. The third line, &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;, shows the type of data in each column. After the third line, each line shows one row in the dataset, starting with a row number. We can add rows and columns using the add_row() and add_column() functions respectively. The add_row() function takes an argument for each column in the tibble while the add_column() function takes an argument for each row in the tibble. people &lt;- add_row(people, Name = &quot;Brian&quot;, Department = &quot;Biostatistics&quot;, School = &quot;JHU&quot;) people ## # A tibble: 5 x 3 ## Name Department School ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Shannon Genetics JHU ## 2 Jeff Biostatistics JHU ## 3 Sean Cognitive Science UCSD ## 4 Roger Biostatistics Monash ## 5 Brian Biostatistics JHU people &lt;- add_column(people, Puppet = c(FALSE, TRUE, FALSE, TRUE, TRUE)) people ## # A tibble: 5 x 4 ## Name Department School Puppet ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;lgl&gt; ## 1 Shannon Genetics JHU F ## 2 Jeff Biostatistics JHU T ## 3 Sean Cognitive Science UCSD F ## 4 Roger Biostatistics Monash T ## 5 Brian Biostatistics JHU T Sometimes it’s advantageous to view a tibble with the columns on the left, so that all of the column names are printed to the console. You can use the glimpse() function to flip a tibble along its diagonal axis from upper left to lower right for viewing purposes, like a matrix transpose: glimpse(people) ## Observations: 5 ## Variables: 4 ## $ Name &lt;chr&gt; &quot;Shannon&quot;, &quot;Jeff&quot;, &quot;Sean&quot;, &quot;Roger&quot;, &quot;Brian&quot; ## $ Department &lt;chr&gt; &quot;Genetics&quot;, &quot;Biostatistics&quot;, &quot;Cognitive Science&quot;, &quot;... ## $ School &lt;chr&gt; &quot;JHU&quot;, &quot;JHU&quot;, &quot;UCSD&quot;, &quot;Monash&quot;, &quot;JHU&quot; ## $ Puppet &lt;lgl&gt; FALSE, TRUE, FALSE, TRUE, TRUE In additiion to creating tibbles from scratch with data_frame(), you can also just use the tibble() function: rhode_island &lt;- tibble( County = c(&quot;Bristol&quot;, &quot;Kent&quot;, &quot;Newport&quot;, &quot;Providence&quot;, &quot;Washington&quot;), Population = c(49875, 166158, 82888, 626667, 126979) ) rhode_island ## # A tibble: 5 x 2 ## County Population ## &lt;chr&gt; &lt;dbl&gt; ## 1 Bristol 49875 ## 2 Kent 166158 ## 3 Newport 82888 ## 4 Providence 626667 ## 5 Washington 126979 The tibble package also provides the handy tribble() function, which allows you to construct tibbles row-wise instead of column-wise: uc_schools &lt;- tribble( ~Name, ~Founded, ~Enrolled, &quot;Los Angeles&quot;, 1919, 42239, &quot;Berkeley&quot;, 1868, 37581, &quot;Davis&quot;, 1908, 35415, &quot;San Diego&quot;, 1960, 31502, &quot;Irvine&quot;, 1965, 30757, &quot;Santa Barbara&quot;, 1909, 23051, &quot;Riverside&quot;, 1954, 21680, &quot;Santa Cruz&quot;, 1965, 17866, &quot;Merced&quot;, 2005, 6268, &quot;San Fransisco&quot;, 1873, 4904 ) uc_schools ## # A tibble: 10 x 3 ## Name Founded Enrolled ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Los Angeles 1919 42239 ## 2 Berkeley 1868 37581 ## 3 Davis 1908 35415 ## 4 San Diego 1960 31502 ## 5 Irvine 1965 30757 ## 6 Santa Barbara 1909 23051 ## 7 Riverside 1954 21680 ## 8 Santa Cruz 1965 17866 ## 9 Merced 2005 6268 ## 10 San Fransisco 1873 4904 1.2.1 Summary Data frames are rectangular data sctructures like spreadsheets. Tibbles are data frames with extra helpful features. You can create a tibble with tibble() and add rows and columns with add_row() and add_column(). View a transposed tibble with glimpse(). Creat row-wise tibbles with tribble(). 1.2.2 Exercises Create a tibble like uc_schools, but with information about the four University Centers that are part of the State University of New York system. Construct the tibble you just created with tribble(). 1.3 Tidy Data We’re living through an exciting moment in history where data science is emerging as its own academic discipline. One of data science’s central ideas is the notion of tidy data, which Hadley Wickham introduced in his Tidy Data paper in the Jouranl of Statistical Software. I strongly recommend that you read the paper. The concept of tidy data boils down to three principles: Groups of observations should be stored in rectangular tables. Each observation should be represented by a row in the table. Each variable observed should be represented by a column in the table. Practicing tidy data principles can help you ask important questions about your data. Let’s take a look at an example of an untidy dataset of people in a drug trial: Drug &lt; 18 18-35 36-45 46-64 65+ Jeffazapram 5 16 11 32 10 Rogerdone 14 9 1 18 4 Brianophil 66 72 81 30 21 Looking at this table we can see that first column contains the names of each drug. Every other column corresponds to an age group of study participants, with the number of participants in each column. When evaluating if a dataset is tidy first ask: what are the variables in the dataset? Here we can identify three variables: the name of the drug, the age group of the participants, and the number of people in each drug/age group. After you’ve identified the variables ask: is each variable represented with a column? Here we can see that the three variables we identified are not represented by columns. Let’s take a look at the tidy version of this dataset: Drug Age Participants Jeffazapram &lt; 18 5 Rogerdone &lt; 18 14 Brianophil &lt; 18 66 Jeffazapram 18-35 16 Rogerdone 18-35 9 Brianophil 18-35 72 Jeffazapram 36-45 11 Rogerdone 36-45 1 Brianophil 36-45 81 Jeffazapram 46-64 32 Rogerdone 46-64 18 Brianophil 46-64 30 Jeffazapram 65+ 10 Rogerdone 65+ 4 Brianophil 65+ 21 Both tables show the same information, and the tidy version of the table is larger than the untidy version. In the following chapters we will discuss how they tidy data allows us to ask questions about data more easily. 1.4 Matrix Data Besides data frames and tibbles the other rectagular shaped data sctructure you should be aware of in R is the matrix. Matricies encode at least three different pieces of information about each value in the matrix: the X position of a value, the Y position of a value, and the value itself. We can create matricies using the matrix() function: matrix(c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;), nrow = 2, ncol = 2) ## [,1] [,2] ## [1,] &quot;a&quot; &quot;c&quot; ## [2,] &quot;b&quot; &quot;d&quot; When constructing a matrix from a vector the values are filled in column-wise by default. Matricies are often useful for storing images and performing operations with linear algebra. The same information in the matrix above would like this in a tidy dataset: tibble(X = c(1, 1, 2, 2), Y = c(1, 2, 1, 2), Value = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)) ## # A tibble: 4 x 3 ## X Y Value ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 1.00 1.00 a ## 2 1.00 2.00 b ## 3 2.00 1.00 c ## 4 2.00 2.00 d 1.5 Hierarchical Data One form of data that doesn’t fit neatly into a rectangle is heirarchical data. The most common hierarchical data sctructure in R is a list. Any other data structure can be the element of a list, and lists that contain other lists are often use to represent hierarchical data in R. We’ll encounter a few types of heirarchical data structures that can be converted to lists of lists when we discuss getting data from the web in a later chapter. "],
["data-from-files.html", "Chapter 2 Data from Files 2.1 Tabular Data 2.2 Text 2.3 Images", " Chapter 2 Data from Files It will often be the case that you have a file on your computer that you want to read into R. In this chapter we will cover how to 2.1 Tabular Data readr readxl 2.2 Text 2.3 Images "],
["data-from-the-web.html", "Chapter 3 Data from the Web 3.1 Files 3.2 APIs 3.3 Web Scraping", " Chapter 3 Data from the Web 3.1 Files downloadr 3.2 APIs xml2 jsonlite httr 3.3 Web Scraping rvest "],
["applied-tidying.html", "Chapter 4 Applied Tidying 4.1 Text Manipulation 4.2 Dates &amp; Times 4.3 Data Rectangling 4.4 Databases", " Chapter 4 Applied Tidying 4.1 Text Manipulation 4.1.1 Regular Expressions stringr glue 4.2 Dates &amp; Times lubridate hms 4.3 Data Rectangling magrittr dplyr tidyr 4.4 Databases "]
]
